{
	"name": "dataflow_test1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Join1"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Exists1"
				},
				{
					"name": "Union1"
				},
				{
					"name": "Lookup1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "Pivot1"
				},
				{
					"name": "Unpivot1"
				},
				{
					"name": "Window1"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "\n\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tjoinType:'inner',\n\tbroadcast: 'none')~> Join1\nJoin1 split(ERROR_FUNCTION(''),\n\tdisjoint: false) ~> ConditionalSplit1@(, )\nConditionalSplit1 exists(') == ERROR_FUNCTION(',\n\tnegate:false,\n\tbroadcast: 'none')~> Exists1\nExists1 union(byName: true)~> Union1\nUnion1 lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),\n\tbroadcast: 'none')~> Lookup1\nLookup1 derive() ~> DerivedColumn1\nDerivedColumn1 select() ~> Select1\nSelect1 aggregate() ~> Aggregate1\nAggregate1 keyGenerate(output(undefined as long),\n\tstartAt: 1L) ~> SurrogateKey1\nSurrogateKey1 pivot(columnNaming: '$N$V',\n\tlateral: true) ~> Pivot1\nPivot1 unpivot(output(\n\t\t\n\t),\n\tlateral: true,\n\tignoreNullPivots: false) ~> Unpivot1\nUnpivot1 window() ~> Window1\nWindow1 filter(ERROR_FUNCTION('')) ~> Filter1\nFilter1 sort(asc(ERROR_FUNCTION(''), true)) ~> Sort1\nSort1 alterRow() ~> AlterRow1\nAlterRow1 sink() ~> sink1"
		}
	}
}